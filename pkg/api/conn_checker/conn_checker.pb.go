// Code generated by protoc-gen-go. DO NOT EDIT.
// source: conn_checker.proto

package conn_checker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConnResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnResponse) Reset()         { *m = ConnResponse{} }
func (m *ConnResponse) String() string { return proto.CompactTextString(m) }
func (*ConnResponse) ProtoMessage()    {}
func (*ConnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5acf3187d233731, []int{0}
}

func (m *ConnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnResponse.Unmarshal(m, b)
}
func (m *ConnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnResponse.Marshal(b, m, deterministic)
}
func (m *ConnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnResponse.Merge(m, src)
}
func (m *ConnResponse) XXX_Size() int {
	return xxx_messageInfo_ConnResponse.Size(m)
}
func (m *ConnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnResponse proto.InternalMessageInfo

func (m *ConnResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnResponse)(nil), "conn_checker.ConnResponse")
}

func init() { proto.RegisterFile("conn_checker.proto", fileDescriptor_f5acf3187d233731) }

var fileDescriptor_f5acf3187d233731 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0xcf, 0xcb,
	0x8b, 0x4f, 0xce, 0x48, 0x4d, 0xce, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x41, 0x16, 0x93, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb, 0x25, 0x95, 0xa6,
	0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x94, 0x2a, 0xa9, 0x71, 0xf1, 0x38, 0xe7, 0xe7, 0xe5,
	0x05, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x71, 0xb1, 0x15, 0x97, 0x24, 0x96,
	0x94, 0x16, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x79, 0x46, 0x89, 0x5c, 0x12, 0x20,
	0x75, 0xce, 0x10, 0x33, 0x83, 0x53, 0x8b, 0xca, 0x20, 0x64, 0x66, 0x72, 0xaa, 0x90, 0x2b, 0x17,
	0x3f, 0x58, 0x1c, 0xa4, 0x20, 0x35, 0xb9, 0x24, 0x33, 0x3f, 0x4f, 0x48, 0x4c, 0x0f, 0x62, 0xa9,
	0x1e, 0xcc, 0x52, 0x3d, 0x57, 0x90, 0xa5, 0x52, 0x52, 0x7a, 0x28, 0xce, 0x45, 0xb6, 0x3a, 0x89,
	0x0d, 0xac, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xac, 0xfc, 0xe5, 0xd2, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnCheckerServerServiceClient is the client API for ConnCheckerServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnCheckerServerServiceClient interface {
	CheckConnection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConnResponse, error)
}

type connCheckerServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewConnCheckerServerServiceClient(cc *grpc.ClientConn) ConnCheckerServerServiceClient {
	return &connCheckerServerServiceClient{cc}
}

func (c *connCheckerServerServiceClient) CheckConnection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConnResponse, error) {
	out := new(ConnResponse)
	err := c.cc.Invoke(ctx, "/conn_checker.ConnCheckerServerService/CheckConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnCheckerServerServiceServer is the server API for ConnCheckerServerService service.
type ConnCheckerServerServiceServer interface {
	CheckConnection(context.Context, *empty.Empty) (*ConnResponse, error)
}

// UnimplementedConnCheckerServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConnCheckerServerServiceServer struct {
}

func (*UnimplementedConnCheckerServerServiceServer) CheckConnection(ctx context.Context, req *empty.Empty) (*ConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnection not implemented")
}

func RegisterConnCheckerServerServiceServer(s *grpc.Server, srv ConnCheckerServerServiceServer) {
	s.RegisterService(&_ConnCheckerServerService_serviceDesc, srv)
}

func _ConnCheckerServerService_CheckConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnCheckerServerServiceServer).CheckConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conn_checker.ConnCheckerServerService/CheckConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnCheckerServerServiceServer).CheckConnection(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnCheckerServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conn_checker.ConnCheckerServerService",
	HandlerType: (*ConnCheckerServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckConnection",
			Handler:    _ConnCheckerServerService_CheckConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conn_checker.proto",
}
